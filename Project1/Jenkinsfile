pipeline {
 stages {
	stage('Install-puppetAgent'){
		node('slaveNode1'){
			steps{
				sh 'cd ~ && wget https://apt.puppetlabs.com/puppetlabs-release-pc1-trusty.deb; \
				sudo dpkg -i puppetlabs-release-pc1-trusty.deb; \
				sudo apt-get -y update; \
				sudo apt-get -y install puppet-agent; '
				
				sh 'sudo /opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true'
			}
		}
	}
	stage('SignCertificate'){
		node('masterNode'){
			steps{
			 sh 'sudo puppet cert sign --all'
			}
		}
	}
 }
}

pipeline {
 stages {
	stage('gitCheckout'){
		node('slaveNode1'){
			steps{
				git branch: master, credentialsId: 'gitcreds', poll: true, url: 'https://github.com/edureka-devops/projCert.git'
			}
		}
	}
	stage('pulldockerfile'){
		node('slaveNode1'){
			steps{
			 git branch: master, credentialsId: 'gitcreds', poll: false, url: 'https://github.com/maurya-vivek/Docker-Test.git'
			}
		}
	}
	stage('buildImage'){
		node('slaveNode1'){
			steps{
			dir("${WORKSPACE}/Docker-Test/Project1/")
			sh 'docker build -t php-app-project1 .'
			}
		}
	}
	stage('runContainer'){
		node('slaveNode1'){
			steps{
			sh 'docker run -d -p 8080:80 --name myphpapp php-app-project1:latest'
			}
		}
	}
	stage('containerHealthCheck'){
		node('slaveNode1'){
			steps{
				script{
					def containerStatus = sh(script: '''docker container inspect -f '{{.State.Status}}' myphpapp''', returnStdout: true).trim()
					echo containerStatus
					
					if(containerStatus.toString() == 'running'){
						echo 'Initial status: Container running'
					}
					else {
						error "Container not running..deleting container..!!"
						sh 'docker rm myphpapp'
					}           
				}
			}
		}
	}
 }
}
